/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tQueueHandleType {
    _unused: [u8; 0],
}
pub type tQueueHandle = *mut tQueueHandleType;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tXcpOdt {
    pub first_odt_entry: u16,
    pub last_odt_entry: u16,
    pub size: u16,
    pub res: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tXcpOdt"][::std::mem::size_of::<tXcpOdt>() - 8usize];
    ["Alignment of tXcpOdt"][::std::mem::align_of::<tXcpOdt>() - 1usize];
    ["Offset of field: tXcpOdt::first_odt_entry"][::std::mem::offset_of!(tXcpOdt, first_odt_entry) - 0usize];
    ["Offset of field: tXcpOdt::last_odt_entry"][::std::mem::offset_of!(tXcpOdt, last_odt_entry) - 2usize];
    ["Offset of field: tXcpOdt::size"][::std::mem::offset_of!(tXcpOdt, size) - 4usize];
    ["Offset of field: tXcpOdt::res"][::std::mem::offset_of!(tXcpOdt, res) - 6usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tXcpDaqList {
    pub last_odt: u16,
    pub first_odt: u16,
    pub event_channel: u16,
    pub res1: u16,
    pub mode: u8,
    pub state: u8,
    pub priority: u8,
    pub addr_ext: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tXcpDaqList"][::std::mem::size_of::<tXcpDaqList>() - 12usize];
    ["Alignment of tXcpDaqList"][::std::mem::align_of::<tXcpDaqList>() - 1usize];
    ["Offset of field: tXcpDaqList::last_odt"][::std::mem::offset_of!(tXcpDaqList, last_odt) - 0usize];
    ["Offset of field: tXcpDaqList::first_odt"][::std::mem::offset_of!(tXcpDaqList, first_odt) - 2usize];
    ["Offset of field: tXcpDaqList::event_channel"][::std::mem::offset_of!(tXcpDaqList, event_channel) - 4usize];
    ["Offset of field: tXcpDaqList::res1"][::std::mem::offset_of!(tXcpDaqList, res1) - 6usize];
    ["Offset of field: tXcpDaqList::mode"][::std::mem::offset_of!(tXcpDaqList, mode) - 8usize];
    ["Offset of field: tXcpDaqList::state"][::std::mem::offset_of!(tXcpDaqList, state) - 9usize];
    ["Offset of field: tXcpDaqList::priority"][::std::mem::offset_of!(tXcpDaqList, priority) - 10usize];
    ["Offset of field: tXcpDaqList::addr_ext"][::std::mem::offset_of!(tXcpDaqList, addr_ext) - 11usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct tXcpDaqLists {
    pub odt_entry_count: u16,
    pub odt_count: u16,
    pub daq_count: u16,
    pub res: u16,
    pub config_id: u16,
    pub res1: u16,
    pub u: tXcpDaqLists__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union tXcpDaqLists__bindgen_ty_1 {
    pub daq_list: [tXcpDaqList; 13653usize],
    pub odt: [tXcpOdt; 20480usize],
    pub odt_entry_addr: [u32; 40960usize],
    pub odt_entry_size: [u8; 163840usize],
    pub b: [u64; 20481usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tXcpDaqLists__bindgen_ty_1"][::std::mem::size_of::<tXcpDaqLists__bindgen_ty_1>() - 163848usize];
    ["Alignment of tXcpDaqLists__bindgen_ty_1"][::std::mem::align_of::<tXcpDaqLists__bindgen_ty_1>() - 1usize];
    ["Offset of field: tXcpDaqLists__bindgen_ty_1::daq_list"][::std::mem::offset_of!(tXcpDaqLists__bindgen_ty_1, daq_list) - 0usize];
    ["Offset of field: tXcpDaqLists__bindgen_ty_1::odt"][::std::mem::offset_of!(tXcpDaqLists__bindgen_ty_1, odt) - 0usize];
    ["Offset of field: tXcpDaqLists__bindgen_ty_1::odt_entry_addr"][::std::mem::offset_of!(tXcpDaqLists__bindgen_ty_1, odt_entry_addr) - 0usize];
    ["Offset of field: tXcpDaqLists__bindgen_ty_1::odt_entry_size"][::std::mem::offset_of!(tXcpDaqLists__bindgen_ty_1, odt_entry_size) - 0usize];
    ["Offset of field: tXcpDaqLists__bindgen_ty_1::b"][::std::mem::offset_of!(tXcpDaqLists__bindgen_ty_1, b) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tXcpDaqLists"][::std::mem::size_of::<tXcpDaqLists>() - 163860usize];
    ["Alignment of tXcpDaqLists"][::std::mem::align_of::<tXcpDaqLists>() - 1usize];
    ["Offset of field: tXcpDaqLists::odt_entry_count"][::std::mem::offset_of!(tXcpDaqLists, odt_entry_count) - 0usize];
    ["Offset of field: tXcpDaqLists::odt_count"][::std::mem::offset_of!(tXcpDaqLists, odt_count) - 2usize];
    ["Offset of field: tXcpDaqLists::daq_count"][::std::mem::offset_of!(tXcpDaqLists, daq_count) - 4usize];
    ["Offset of field: tXcpDaqLists::res"][::std::mem::offset_of!(tXcpDaqLists, res) - 6usize];
    ["Offset of field: tXcpDaqLists::config_id"][::std::mem::offset_of!(tXcpDaqLists, config_id) - 8usize];
    ["Offset of field: tXcpDaqLists::res1"][::std::mem::offset_of!(tXcpDaqLists, res1) - 10usize];
    ["Offset of field: tXcpDaqLists::u"][::std::mem::offset_of!(tXcpDaqLists, u) - 12usize];
};
unsafe extern "C" {
    pub fn XcpInit();
}
unsafe extern "C" {
    pub fn XcpDisconnect();
}
unsafe extern "C" {
    pub fn XcpTriggerDaqEventAt(daq_lists: *const tXcpDaqLists, queueHandle: tQueueHandle, event: u16, base: *const u8, clock: u64);
}
unsafe extern "C" {
    pub fn XcpEventExt(event: u16, base: *const u8) -> u8;
}
unsafe extern "C" {
    pub fn XcpEvent(event: u16);
}
unsafe extern "C" {
    pub fn XcpSendTerminateSessionEvent();
}
unsafe extern "C" {
    pub fn XcpPrint(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ApplXcpGetClock64() -> u64;
}
unsafe extern "C" {
    pub fn XcpEthTlGetInfo(isTCP: *mut bool, mac: *mut u8, addr: *mut u8, port: *mut u16);
}
unsafe extern "C" {
    #[doc = " Initialize the XCP on Ethernet server instance.\n @pre User has called XcpInit.\n @param address Address to bind to.\n @param port Port to bind to.\n @param use_tcp Use TCP if true, otherwise UDP.\n @param measurement_queue Optional external memory to place the measurement queue.\n Pass NULL if server should allocate it.\n @param measurement_queue_size Measurement queue size in bytes. Includes the bytes occupied by the queue header.\n @return True on success, otherwise false."]
    pub fn XcpEthServerInit(address: *const u8, port: u16, use_tcp: bool, measurement_queue: *mut ::std::os::raw::c_void, measurement_queue_size: u32) -> bool;
}
unsafe extern "C" {
    #[doc = " Shutdown the XCP on Ethernet server instance."]
    pub fn XcpEthServerShutdown() -> bool;
}
unsafe extern "C" {
    #[doc = " Get the XCP on Ethernet server instance status.\n @return True if the server is running, otherwise false."]
    pub fn XcpEthServerStatus() -> bool;
}
unsafe extern "C" {
    pub fn ApplXcpSetLogLevel(level: u8);
}
unsafe extern "C" {
    pub fn ApplXcpRegisterCallbacks(
        cb_connect: ::std::option::Option<unsafe extern "C" fn() -> u8>,
        cb_prepare_daq: ::std::option::Option<unsafe extern "C" fn() -> u8>,
        cb_start_daq: ::std::option::Option<unsafe extern "C" fn() -> u8>,
        cb_stop_daq: ::std::option::Option<unsafe extern "C" fn()>,
        cb_freeze_daq: ::std::option::Option<unsafe extern "C" fn(clear: u8, config_id: u16) -> u8>,
        cb_get_cal_page: ::std::option::Option<unsafe extern "C" fn(segment: u8, mode: u8) -> u8>,
        cb_set_cal_page: ::std::option::Option<unsafe extern "C" fn(segment: u8, page: u8, mode: u8) -> u8>,
        cb_freeze_cal: ::std::option::Option<unsafe extern "C" fn() -> u8>,
        cb_init_cal: ::std::option::Option<unsafe extern "C" fn(src_page: u8, dst_page: u8) -> u8>,
        cb_read: ::std::option::Option<unsafe extern "C" fn(src: u32, size: u8, dst: *mut u8) -> u8>,
        cb_write: ::std::option::Option<unsafe extern "C" fn(dst: u32, size: u8, src: *const u8, delay: u8) -> u8>,
        cb_flush: ::std::option::Option<unsafe extern "C" fn() -> u8>,
    );
}
unsafe extern "C" {
    pub fn ApplXcpSetA2lName(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ApplXcpSetEpk(name: *const ::std::os::raw::c_char);
}
